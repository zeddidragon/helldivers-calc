mixin weaponsHeader
  th.weapon.idx(
    title=t('table.th.wpn', 'idx', 'Internal order')
  ) #
  if !hideHeaders.weapon
    th.weapons.source(
      title=t('table.th.wpn', 'source')
    )= t('table.th.wpn.label', 'source')
    th.weapon.category(
      title=t('table.th.wpn', 'category')
    )= t('table.th.wpn.label', 'category')
    th.weapon.code(
      title=t('table.th.wpn', 'code')
    )= t('table.th.wpn.label', 'code')
  th.weapon.name(
    title=t('table.th.wpn', 'name')
  )= t('table.th.wpn.label', 'weapon')
  th.weapon.damage(
    title=t('table.th.dmg', 'dmgs3')
    colspan=collapseDamage ? 2 : 3
  )
    input(
      type="checkbox"
      checked=collapseDamage
      onclick="toggleCollapseDamage(event)"
    )
    span= t('table.th.wpn.label', 'damage')
  th.weapon.shotdmg2(
    title=t('table.th.dmg', 'dmg2')
  )
    sub= t('table.th.wpn.label.sub', 'dmg2')
  if collapseDamage
    th.weapon.shotdmgx(
      title=t('table.th.dmg', 'dmgx')
    )
      sub= t('table.th.wpn.label.sub', 'dmgx')
  th.damage.ap(
    title=t('table.th.dmg', 'ap')
  )= t('table.th.wpn.label', 'ap')
  th.weapon.rpm(
    title=t('table.th.wpn', 'rpm')
  )= t('table.th.wpn.label', 'rpm')
  if !hideHeaders.weapon
    th.weapon.reload(
      title=t('table.th.wpn', 'reloads3')
    )= t('table.th.wpn.label', 'rel')
    th.weapon.cap(
      title=t('table.th.wpn', 'cap')
      colspan=2
    )= t('table.th.wpn.label', 'cap')
    th.weapon.spare(
      title=t('table.th.wpn', 'spare4')
      colspan=2
    )= t('table.th.wpn.label', 'spare4')
  if !hideHeaders.damage
    +damagesHeader({ apCount: 1, effectsCount: 1 })
  if !hideHeaders.projectile
    +projectilesHeader()
  if !hideHeaders.dps
    th.weapon.dps(
      title=t('table.th.wpn', 'dps')
    )= t('table.th.wpn.label', 'dps')
    th.weapon.tdps(
      title=t('table.th.wpn', 'tdps')
    )= t('table.th.wpn.label', 'tdps')
    th.weapon.magdump(
      title=t('table.th.wpn', 'dmag')
    )= t('table.th.wpn.label', 'dmag')
    th.weapon.totaldump(
      title=t('table.th.wpn', 'total')
    )= t('table.th.wpn.label', 'total')
  if !hideHeaders.dps2
    th.weapon.dps2(
      title=t('table.th.wpn', 'ddps')
    )
      sup= t('table.th.wpn.label.sup', 'ddps')
      sub= t('table.th.wpn.label.sub', 'ddps')
    th.weapon.tdps2(
      title=t('table.th.wpn', 'dtdps')
    )
      sup= t('table.th.wpn.label.sup', 'dtdps')
    th.weapon.magdump2(
      title=t('table.th.wpn', 'ddmag')
    )
      sup= t('table.th.wpn.label.sup', 'ddmag')
    th.weapon.totaldump2(
      title=t('table.th.wpn', 'dtotal')
    )
      sup= t('table.th.wpn.label.sup', 'dtotal')

mixin weaponDamageRow(wpn)
  - const dmg = wpn.damage || {}
  td.weapon.type(class={ xdmg: !!wpn.explosion })
    if dmg.type
      - var el = element(dmg)
      span.dmgtype(
        title=t('dmg.types.full', el)
      )= t('dmg.types', el)
  - const n = count(wpn)
  if collapseDamage
    td.weapon.dmg(class={ muted: !wpn.shotdmg })= wpn.shotdmg
    td.weapon.dmg2(class={ muted: !wpn.shotdmg2 })= wpn.shotdmg2
    td.weapon.dmgx(class={ muted: !wpn.shotdmgx })= wpn.shotdmgx
  else
    td.weapon.pellets(class={ muted: n == 1, blank: !n })= n
    td.weapon.dmg(class={ xdmg: !!wpn.explosion })= dmg.dmg
    td.weapon.dmg2(class={ xdmg: !!wpn.explosion })= dmg.dmg2
  - let ap = dmg.ap1
  td.damage.ap(class=`ap-${ap}`)= ap

mixin weaponsRow(wpn, opts)
  td.weapon.idx= wpn.idx
  if !hideHeaders.weapon
    td.weapons.source(title=t('wpn.source.full', wpn.source))
      span(class=wpn.source).source-main.source= t('wpn.source.label', wpn.source)
      if wpn.sourcepage
        span.source-page=wpn.sourcepage
    td.weapon.category(
      title=t('wpn.category.full', wpn.category)
      class=wpn.category
    )= t('wpn.category.label', wpn.category)
    if wpn.parent
      td.inheritance └
    else
      td.weapon.code
        if wpn.code
          a(href=wikiLink(wpn) target="_blank")= wpn.code
  td.weapon.name(class=`name-${wpn.type}`)
    if wpn.name
      a(href=wikiLink(wpn) target="_blank")= wpn.name
    else if wpn.explosion
      span.weapon.name= t('table.td.dmg.label',  'explosion', 'Explosion')
  +weaponDamageRow(wpn)
  td.weapon.rpm
    if wpn.beam
      span.rpm-laser Beam
    if wpn.charge
      span.rpm-charge(title="Charge time")
        sup.one-over 1/
        if wpn.chargeearly
          span.charge-early= wpn.chargeearly
        span= wpn.charge
    else
      span.rpm-main= wpn.rpm
  if !hideHeaders.weapon
    td.weapon.reload
      if wpn.reloadone
        span.reload-one(
          title=t('table.td.reload', '1', "Reload 1 round")
        )= wpn.reloadone.toFixed(1)
      if wpn.reloadx
        span.reload-x(
          title=t('table.td.reload', 'x', `Reload max rounds`)
        )= wpn.reloadx.toFixed(1)
      if wpn.reload
        span.reload-main(
          title=t('table.td.reload', 'empty', "Reload from empty")
        )= wpn.reload.toFixed(1)
      if wpn.reloadearly
        span.reload-early(
          title=t('table.td.reload', 'early', "Early Reload (not empty)")
        )= wpn.reloadearly.toFixed(1)
    td.weapon.cap= wpn.cap || wpn.limit
    td.weapon.capextra
      if wpn.limit
        span.cap-limit s
      else if wpn.capplus
        sup.cap-post.cap-plus= wpn.capplus
    td.wepaon.spare
      if wpn.clips
        span.clipsize(
          title=t('table.td.spare', 'clipsize', "Rounds in Clip")
        )= wpn.clipsize
        span.clipstart(
          title=t('table.td.spare', 'clipstart', "Starting Clips")
        )= wpn.clipstart
        span.clips(
          title=t('table.td.spare', 'clipsize', "Max Clips")
        )= wpn.clips
      if wpn.rounds
        span.roundstart(
          title=t('table.td.spare', 'roundstart', "Starting Rounds")
        )= roundStart(wpn)
        span.rounds(
          title=t('table.td.spare', 'rounds', "Max Spare Rounds")
        )= wpn.rounds
      if wpn.mags
        span.magstart(
          title=t('table.td.spare', 'magstart', "Starting Mags")
        )= wpn.magstart || wpn.mags
        span.mags(
          title=t('table.td.spare', 'mags', "Max Mags")
        )= wpn.mags
    td.weapon.pickup
      if wpn.clipsupply
        span.clipsupply(
          title=t('table.td.pickup', 'clipsupply', "Clips From Supply")
        )=wpn.clipsupply
        span.clipsbox(
          title=t('table.td.pickup', 'clipsbox', "Clips From Box")
        )=wpn.clipsbox
      if wpn.roundsupply
        span.roundsupply(
          title=t('table.td.pickup', 'roundsupply', "Rounds From Supply")
        )=wpn.roundsupply
        span.roundsbox(
          title=t('table.td.pickup', 'roundsbox', "Rounds From Box")
        )=wpn.roundsbox
      if wpn.supply
        span.supply(
          title=t('table.td.pickup', 'supply', "Mags From Supply")
        )=wpn.supply
        span.box(
          title=t('table.td.pickup', 'box', "Mags From Box")
        )=wpn.box
  if !hideHeaders.damage
    if wpn.damage
      +damagesRow(wpn.damage, { explosive: !!wpn.explosion, apCount: 1, effectsCount: 1 })
    else
      td.damage-filler(colspan=colspans.damages)
  if !hideHeaders.projectile
    if wpn.projectile
      +projectilesRow(wpn.projectile)
    else if wpn.explosion
      +explosionsStubRow(wpn.explosion)
    else if wpn.arc
      +arcsStubRow(wpn.arc)
    else if wpn.beam
      +beamsStubRow(wpn.beam)
    else
      td.projectile-filler(colspan=colspans.projectiles)
  if !hideHeaders.dps
    td.dps= wpn.dps
    td.tdps= wpn.tdps
    td.magdump= wpn.magdump
    td.totaldump= wpn.totaldump
  if !hideHeaders.dps2
    td.dps2= wpn.dps2
    td.tdps2= wpn.tdps2
    td.magdump2= wpn.magdump2
    td.totaldump2= wpn.totaldump2

mixin stratagemsHeader(opts = {})
  th.stratagem.stratcode(
    title=t('table.th.strat', 'stratcode')
  )= t('table.th.strat.label', 'stratcode')
  th.stratagem.category(
    title=t('table.th.strat', 'category')
  )= t('table.th.strat.label', 'category')
  th.stratagem.name(
    title=t('table.th.strat', 'name')
  )= t('table.th.strat.label', 'name')
  th.stratagem.calltime(
    title=t('table.th.strat', 'calltime')
  )= t('table.th.strat.label', 'calltime')
  th.stratagem.cooldown(
    title=t('table.th.strat', 'cooldown')
  )= t('table.th.strat.label', 'cooldown')
  th.stratagem.uses(
    title=t('table.th.strat', 'uses')
  )= t('table.th.strat.label', 'uses')
  th.stratagem.health(
    title=t('table.th.strat', 'health')
  )= t('table.th.strat.label', 'health')
  th.stratagem.armor(
    title=t('table.th.strat', 'armor')
  )= t('table.th.strat.label', 'armor')
  th.stratagem.rpm(
    title=t('table.th.strat', 'rpm')
  )= t('table.th.strat.label', 'rpm')
  th.stratagem.cap(
    title=t('table.th.strat', 'cap')
    colspan=2
  )= t('table.th.strat.label', 'cap')
  th.stratagem.damage(
    title=t('table.th.dmg', 'dmgs3')
    colspan=3
  )= t('table.th.dmg.label', 'dmgs3')
  th.stratagem.shotdmg2(
    title=t('table.th.dmg', 'dmg2')
  )
    sub= t('table.th.wpn.label.sub', 'dmg2')
  th.damage.ap(
    title=t('table.th.dmg', 'ap')
  )= t('table.th.dmg.label', 'ap')
  +damagesHeader({ apCount: 1, effectsCount: 1 })
  +explosionsHeader({})

mixin stratagemsRow(obj, opts = {})
  td.stratagem.stratcode
    .arrows= obj.arrows
  if obj.parent
    td.inheritance └
  else
    td.stratagem.category(
      title=t('strat.category.full', obj.category)
      class=obj.category
    )= t('strat.category.label', obj.category)
  td.stratagem.name(class=`name-${obj.category || obj.type}`)
    a(href=wikiLink(obj) target="_blank")= obj.name
  td.stratagem.calltime= obj.calltime
  td.stratagem.cooldown= obj.cooldown
  td.stratagem.uses= obj.uses || obj.eaglestock
  td.stratagem.health= obj.health
  td.stratagem.armor(class=`ap-${obj.armor}`)= obj.armor
  td.stratagem.rpm
    if obj.beam
      span.rpm-laser Beam
    else
      span.rpm-main= obj.rpm
  td.stratagem.cap
    if obj.salvos
      span.salvos= obj.salvos
    span.strat-cap= obj.cap || obj.limit
  td.stratagem.capextra
    if obj.limit
      span.cap-limit s
  if obj.shield
    +shieldRow(obj)
  else
    +weaponDamageRow(obj)
    +damagesRow(obj.damage || {}, { apCount: 1, effectsCount: 1 })
    +explosionsRow(obj.explosion || {})

mixin shieldRow(obj)
  td.stratagem.label(
    title=t('table.th.strat', 'shield', 'Shield Health, Regen, Delay, Delay After Breaking, Radius')
    colspan=2
  )= t('table.td.aoe.label', 'shield', 'Shield')
  td.stratagem.shield.stub= obj.shield
  td.stratagem.shield.stub.shieldregen(colspan=2)= obj.shieldregen
  td.stratagem.shielddelay.time.stub= obj.shielddelay
  td.stratagem.shieldbreakdelay.time.stub= obj.shieldbreakdelay
  td.stratagem.shieldradius.length(colspan=2)= obj.shieldradius
  td.stratagem.shield.padding(colspan=3)

mixin projectilesHeader(opts = {})
  if opts.full
    th.projectile.idx(
      title=t('table.th.prj', 'idx', 'Internal order')
    )= t('table.th.prj.label', 'idx')
    th.projectile.id(
      title=t('table.th.prj', 'id', 'ID of projectile data (hex)')
    )
      sup= t('table.th.prj.label.sup', 'id')
      sub= t('table.th.prj.label.sub', 'id')
    th.projectile.name(
      title=t('table.th.prj', 'name', 'Translated name of projectile')
    )= t('table.th.prj.label', 'name', 'Name')
    th.projectile.damageid(
      title=t('table.th.prj', 'damageid', 'ID of damage data used (hex)')
    )
      sup= t('table.th.prj.label.sup', 'damageid')
      sub= t('table.th.prj.label.sub', 'damageid')
    th.projectile.pellets(
      title=t('table.th.prj', 'pellets', 'Pellet Count')
    )
  else if showIds
    th.projectile.id(
      title=t('table.th.prj2', 'id', 'ID of medium (projectile or explosion data) (hex)')
    )
      sup= t('table.th.prj2.label.sup', 'id', 'ID')
      sub= t('table.th.prj2.label.sub', 'id', 'm')
  th.projectile.caliber(
    title=t('table.th.prj', 'caliber', 'Caliber (mm)')
  )= t('table.th.prj.label', 'caliber', 'Cal')
  th.projectile.velocity(
    title=t('table.th.prj', 'velocity', 'Muzzle Velocity (m/s)')
  )= t('table.th.prj.label', 'velocity', 'v')
  th.projectile.mass(
    title=t('table.th.prj', 'mass', 'Mass (grams)')
  )= t('table.th.prj.label', 'mass', 'm')
  th.projectile.drag(
    title=t('table.th.prj', 'drag', 'Drag Coefficient Multiplier')
  )
    sup= t('table.th.prj.label.sup', 'drag', 'c')
    sub= t('table.th.prj.label.sub', 'drag', 'd')
  th.projectile.gravity(
    title=t('table.th.prj', 'gravity', 'Gravity Multiplier')
  )= t('table.th.prj.label', 'gravity', 'g')
  th.projectile.penslow(
    title=t('table.th.prj', 'penslow', 'Penetration Slowdown')
  )
    sup= t('table.th.prj.label.sup', 'penslow', 'sl')
    sub= t('table.th.prj.label.sub', 'penslow', 'p')
  th.projectile.lifetime(
    title=t('table.th.prj', 'lifetime', 'Lifetime (s)')
  )= t('table.th.prj.label', 'lifetime', 'l')
  th.projectile.xangle(
    title=t('table.th.prj', 'xangle')
  )= t('table.th.prj.label', 'xangle')
  th.projectile.xproximity(
    title=t('table.th.prj', 'xproximity')
  )= t('table.th.prj.label', 'xproximity')
  if opts.full
    th.projectile.ximpactid(
      title=t('table.th.prj', 'ximpactid', 'ID of explosion on impact (hex)')
    )
      sup= t('table.th.prj.label.sup', 'ximpactid')
      sub= t('table.th.prj.label.sub', 'ximpactid')
    th.projectile.xdelay(
      title=t('table.th.prj', 'xdelay')
    )= t('table.th.prj.label', 'xdelay')
    th.projectile.xdelayid(
      title=t('table.th.prj', 'xdelayid', 'ID of explosion on delay (hex)')
    )
      sup= t('table.th.prj.label.sup', 'xdelayid')
      sub= t('table.th.prj.label.sub', 'xdelayid')
  if !opts.full
    th.projectile.name(
      title=t('table.th.prj', 'name', 'Translated name of projectile')
    )= t('table.th.prj.label', 'name', 'Projectile')

mixin projectilesRow(prj, opts = {})
  if opts.full
    td.projectile.idx= prj.idx
    td.projectile.id= id(prj)
    td.projectile.name= prj.name
    td.projectile.damageid= id(prj, 'damageid')
    td.projectile.pellets(class={ muted: prj.pellets < 2 })= prj.pellets
  else if showIds
    td.projectile.id= id(prj)
  td.projectile.caliber= prj.caliber
  td.projectile.velocity= prj.velocity
  td.projectile.mass= prj.mass
  td.projectile.drag= prj.drag
  td.projectile.gravity= prj.gravity
  td.projectile.penslow= prj.penslow
  td.projectile.lifetime(class={ muted: !prj.lifetime })
      if prj.liferandom
        span.liferandom= prj.liferandom
      span.lifetime= prj.lifetime
  td.projectile.xangle(class={ muted: !prj.xangle })= `${prj.xangle}°`
  td.projectile.xproximity(class={ muted: !prj.xproximity })= prj.xproximity
  if opts.full
    td.projectile.ximpactid= id(prj, 'ximpactid')
    td.projectile.xdelay(class={ muted: !prj.xdelay })= prj.xdelay
    td.projectile.xdelayid= id(prj, 'xdelayid')
  if !opts.full
    td.projectile.name= prj.name

mixin explosionsHeader(opts = {})
  if opts.full
    th.explosion.idx(
      title=t('table.th.aoe', 'idx', 'Internal order')
    )= t('table.th.aoe.label', 'idx')
    th.explosion.id(
      title=t('table.th.aoe', 'id', 'ID of explosion data (hex)')
    )
      sup= t('table.th.aoe.label.sup', 'id', 'ID')
      sub= t('table.th.aoe.label.sub', 'id', 'x')
    th.explosion.name(
      title=t('table.th.aoe', 'name', 'Translated name of AoE source')
    )= t('table.th.aoe.label', 'name', 'Explosion')
    th.explosion.damageid(
      title=t('table.th.aoe', 'damageid', 'ID of damage data used (hex)')
    )
      sup= t('table.th.aoe.label.sup', 'damageid')
      sub= t('table.th.aoe.label.sub', 'damageid')
  th.explosion.r1(
    title=t('table.th.aoe', 'r1', 'Inner Radius (m)')
  )= t('table.th.aoe.label', 'r1')
  th.explosion.r2(
    title=t('table.th.aoe', 'r2', 'Outer Radius (m)')
  )= t('table.th.aoe.label', 'r2')
  th.explosion.r3(
    title=t('table.th.aoe', 'r3', 'Stagger Radius (m)')
  )= t('table.th.aoe.label', 'r3')
  th.explosion.angle(
    title=t('table.th.aoe', 'angle', 'Cone Angle (°)')
  )= t('table.th.aoe.label', 'angle')
  if opts.full
    th.explosion.shrapnel(
      title=t('table.th.aoe', 'shrapnel', 'Amount of Shrapnel Released')
    )= t('table.th.aoe.label', 'shrapnel')
    th.explosion.shrapnelid(
      title=t('table.th.aoe', 'shrapnelid', 'ID of shrapnel projectile used (hex)')
    )
      sup= t('table.th.aoe.label.sup', 'shrapnelid')
      sub= t('table.th.aoe.label.sub', 'shrapnelid')

mixin explosionsStubRow(exp, opts = {})
  if showIds
    td.explosion.id= id(exp)
  td.explosion.label(
    title=t('table.th.aoe', 'radius', 'Radius Inner/Outer/Non-Damage (m)')
  )= t('table.td.aoe.label', 'radius', 'Radius')
  td.explosion.filler
  td.explosion.radius.stub.r1= exp.r1.toFixed(1)
  td.explosion.radius.stub.r2.rx= exp.r2.toFixed(1)
  td.explosion.radius.stub.r3.rx= exp.r3.toFixed(1)
  td.explosion.angle.stub(class={ muted: !exp.angle })= `${exp.angle}°`
  td.explosion.filler(colspan=3)
  td.explosion.name.stub= exp.name

mixin explosionsRow(exp, opts = {})
  if opts.full
    td.explosion.idx= exp.idx
  if opts.full || showIds
    td.explosion.id= id(exp)
  if opts.full
    td.explosion.name= exp.name
    td.explosion.damageid= id(exp, 'damageid')
  td.explosion.radius.r1= exp.r1
  td.explosion.radius.r2.rx= exp.r2
  td.explosion.radius.r3.rx= exp.r3
  td.explosion.angle(class={ muted: !exp.angle })
    if exp.angle != null
      span.explosion.angle= `${exp.angle}°`
  if opts.full
    td.explosion.shrapnel(class={ muted: !exp.shrapnel })= exp.shrapnel
    td.explosion.projectileid(class={ muted: !exp.projectileid })= id(exp, 'projectileid')

mixin beamsHeader(opts = {})
  th.beam.idx(
    title=t('table.th.beam', 'idx', 'Internal order')
  )= t('table.th.beam.label', 'idx')
  th.beam.id(
    title=t('table.th.beam', 'id', 'ID of beam data (hex)')
  )
    sup= t('table.th.beam.label.sup', 'id', 'ID')
    sub= t('table.th.beam.label.sub', 'id', 'b')
  th.beam.name(
    title=t('table.th.beam', 'name', 'Translated name of beam')
  )= t('table.th.beam.label', 'name', 'beam')
  th.beam.damageid(
    title=t('table.th.beam', 'damageid', 'ID of damage data used (hex)')
  )
    sup= t('table.th.beam.label.sup', 'ID')
    sub= t('table.th.beam.label.sub', 'dmg')
  th.beam.range(
    title=t('table.th.beam', 'range', 'Max range (m)')
  )= t('table.th.beam.label', 'range', 'Range')

mixin beamsRow(beam, opts = {})
  td.beam.idx= beam.idx
  td.beam.id= id(beam)
  td.beam.name= beam.name
  td.beam.damageid= id(beam, 'damageid')
  td.beam.range= beam.range

mixin beamsStubRow(beam, opts = {})
  if showIds
    td.beam.id= id(beam)
  td.beam.label(
    title=t('table.th.beam', 'range', 'Beam range (m)')
  )= t('table.td.beam.label', 'range', 'Beam')
  td.beam.range.stub= beam.range
  td.beam.filler(colspan=7)
  td.beam.name.stub= beam.name

mixin arcsHeader(opts = {})
  th.arc.idx(
    title=t('table.th.arc', 'idx', 'Internal order')
  )= t('table.th.arc.label', 'idx')
  th.arc.id(
    title=t('table.th.arc', 'id', 'ID of arc data (hex)')
  )
    sup= t('table.th.arc.label.sup', 'id', 'ID')
    sub= t('table.th.arc.label.sub', 'id', 'b')
  th.arc.name(
    title=t('table.th.arc', 'name', 'Translated name of arc')
  )= t('table.th.arc.label', 'name', 'arc')
  th.arc.damageid(
    title=t('table.th.arc', 'damageid', 'ID of damage data used (hex)')
  )
    sup= t('table.th.arc.label.sup', 'ID')
    sub= t('table.th.arc.label.sub', 'dmg')
  th.arc.velocity(
    title=t('table.th.arc', 'velocity', 'Velocity (m/s)')
  )= t('table.th.arc.label', 'velocity', 'v')
  th.arc.range(
    title=t('table.th.arc', 'range', 'Max range (m)')
  )= t('table.th.arc.label', 'range', 'Range')
  th.arc.aimangle(
    title=t('table.th.arc', 'aimangle', 'Aim angle (°)')
  )
    sup= t('table.th.arc.label.sup', 'aimangle', '∠')
    sub= t('table.th.arc.label.sub', 'aimangle', 'aim')

  th.arc.chainangle(
    title=t('table.th.arc', 'chainangle', 'Chain angle (°)')
  )
    sup= t('table.th.arc.label.sup', 'chainangle', '∠')
    sub= t('table.th.arc.label.sub', 'chainangle', 'ch')

mixin arcsRow(arc, opts = {})
  td.arc.idx= arc.idx
  td.arc.id= id(arc)
  td.arc.name= arc.name
  td.arc.damageid= id(arc, 'damageid')
  td.arc.velocity= arc.velocity
  td.arc.range= arc.range
  td.arc.aimangle= `${arc.aimangle}°`
  td.arc.chainangle= `${arc.chainangle}°`

mixin arcsStubRow(arc, opts = {})
  if showIds
    td.arc.id= id(arc)
  td.arc.label(
    title=t('table.td.arc', 'range', 'Arc range (m)')
  )= t('table.td.arc.label', 'range', 'Arc')
  td.arc.velocity.stub= arc.velocity
  td.arc.range.stub= arc.range
  td.arc.aimangle.stub= `${arc.aimangle}°`
  td.arc.chainangle.stub= `${arc.chainangle}°`
  td.arc.filler(colspan=4)
  td.arc.name.stub= arc.name

mixin damagesHeader(opts = {})
  if opts.full && !opts.hideId
    th.damage.idx(
      title=t('table.th.dmg', 'idx', 'Internal order')
    )= t('table.th.dmg.label', 'idx', '#')
    th.damage.id(
      title=t('table.th.dmg', 'id', 'ID of damage data (hex)')
    )
      sup= t('table.th.dmg.label.sup', 'id', 'ID')
      sub= t('table.th.dmg.label.sub', 'id', 'dmg')
  if opts.full && !opts.hideName
    th.damage.name(
      title=t('table.th.dmg', 'name', 'Translated name of damage source')
    )= t('table.th.dmg.label', 'name', 'Name')
  if opts.full
    th.damage.type(
      title=t('table.th.dmg', 'type')
    )= t('table.th.dmg.label', 'type')
    th.damage.dmg(
      title=t('table.th.dmg', 'dmg')
    )= t('table.th.dmg.label', 'dmg')
    th.damage.dmg2(
      title=t('table.th.dmg', 'dmg2')
    )
      sub= t('table.th.dmg.label.sub', 'dmg2')
    - const apCount = opts.apCount || 4
    th.damage.ap(
      title=t('table.th.dmg', 'ap', 'Armor Penetration, varies by context')
      colspan=apCount
    )= t('table.th.dmg.label', 'ap', 'AP')
  th.damage.demo(
    title=t('table.th.dmg', 'demo', 'Demolition Force')
  )= t('table.th.dmg.label', 'demo', 'DF')
  th.damage.stun(
    title=t('table.th.dmg', 'stun', 'Stagger Value')
  )= t('table.th.dmg.label', 'stun', 'SV')
  th.damage.push(
    title=t('table.th.dmg', 'push', 'Push Force')
  )= t('table.th.dmg.label', 'push', 'PF')
  - const effectsCount = opts.effectsCount || 4
  th.damage.effect(
    title=t('table.th.dmg', 'effects8', 'Status Effects')
    colspan=effectsCount * 2
  )= t('table.th.dmg.label', 'effects8', 'FX')

mixin damagesRow(dmg, opts = {})
  - let i
  if opts.full && !opts.hideId
    td.damage.idx= dmg.idx
    td.damage.id= id(dmg)
  if opts.full && !opts.hideName
    td.damage.name= dmg.name
  if opts.full
    td.damage.dmgtype(
      class={muted: !dmg.type },
      title=t('dmg.types.full', dmg.type),
    )= t('dmg.types', dmg.type)
    td.damage.dmg(class={ xdmg: opts.explosive })= dmg.dmg
    td.damage.dmg2(class={ xdmg: opts.explosive })= dmg.dmg2
    - i = 0
    while i < (opts.apCount || 4)
      - i++
      - var ap = dmg[`ap${i}`]
      td.damage.ap(class=`ap-${ap} ap-list-${i}`)= ap
  td.damage.demo(class={ xdemo: opts.explosive })= dmg.demo
  td.damage.stun(class={ xstun: opts.explosive })= dmg.stun
  td.damage.push(class={ xpush: opts.explosive })= dmg.push
  - i = 0
  while i < (opts.effectsCount || 4)
    - i++
    - var fx = effect(dmg, i)
    td.damage.effect(
      class={ [`effect${i}`]: true, muted: !fx.id }
      title=t('dmg.effects.full', fx.name)
    )= t('dmg.effects', fx.name )
    td.damage.effect-param(class={muted: !fx.id})= fx.param

nav.links
  ul
    li
      a(href="/")= t('nav.links', 'edf', 'Earth Defense Force')
    li.nav-selected
      a(href="/helldivers-2")= t('nav.links', 'self', 'Helldivers 2')
    li |
    li
      a(href="https://helldivers.wiki.gg")= t('nav.links', 'wiki', 'Helldivers Wiki')
    li
      a(href="https://helldivers.io/")= t('nav.links', 'io', 'helldivers.io')
    li.spacer
    li
      ul.langs
        for l in langs
          li.lang(
            onclick=`switchLang('${l}')`
            title=t('nav.langs.full', l)
          )= l
header.menu
  .filters
    .filter-row
      ul.scopes
        for scope in scopes
          li.scope(
            class=scopeClass(scope)
            title=t('nav.scopes.full', scope)
            onclick=`switchScope('${scope}')`
          )= t('nav.scopes.label', scope)
    if scope === 'weapons'
      .filter-row
        ul.sources
          for source in sources
            li.source(
              class=sourceClass(source)
              title=t('wpn.source.full', source)
              onclick=`toggleSource('${source}')`
            )= t('wpn.source.label', source)
      .filter-row
        ul.categories
          for cat in cats
            li.category(
              class=catClass(cat)
              title=t('wpn.category.full', cat)
              onclick=`toggleCategory('${cat}')`
            )= t('wpn.category.label', cat)
        .divider |
        ul.colfilters
          for h in headers
            li.colfilter(
              class=headerClass(h)
              title=t('wpn.header.full', h)
              onclick=`toggleHeader('${h}')`
            )= t('wpn.header.label', h)
table
  thead
    tr
      +#{`${scope}Header`}(full)
      if subScope
        +#{`${subScope}Header`}(hideName)
  tbody
    for obj in objects(scope)
      tr
        +#{`${scope}Row`}(obj, full)
        if subScope
          - let obj2 = subObj(obj)
          if obj2
            +#{`${subScope}Row`}(obj2, hideName)
          else
            td.damage-filler(colspan=colspans.damagesHideName)
if scope === 'weapons'
  ul
    li= t('explanations', 'reload')
    li= t('explanations', 'startingMagsDisclaimer')
    li= t('explanations', 'laserFire')
