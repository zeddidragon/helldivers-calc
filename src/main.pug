mixin weaponsHeader
  th.weapon.idx(
    title=t('table.th.wpn', 'idx', 'Internal order')
 ) #
  th.weapons.source(
    title=t('table.th.wpn', 'source', 'Where to obtain')
  ) Source
  th.weapon.category(
    title=t('table.th.wpn', 'category', 'Weapon Category')
  ) Type
  th.weapon.code(
    title=t('table.th.wpn', 'code', 'Military code')
  ) Code
  th.weapon.name(
    title=t('table.th.wpn', 'name', 'Name')
  ) Name
  th.weapon.dmg(
    title=t('table.th.dmg', 'dmgs3')
  ) Damage
  th.damage.ap(
    title=t('table.th.dmg', 'ap')
  ) AP
  th.weapon.rpm(
    title=t('table.th.wpn', 'rpm', 'Rate of fire (Rounds Per Minute)')
  ) RPM
  th.weapon.reload(
    title=t('table.th.wpn', 'reloads3', 'Reload times (seconds)')
  ) Rel
  th.weapon.cap(
    title=t('table.th.wpn', 'cap', 'Ammo capaccity (+ in chamber)')
    colspan=2
  ) Cap
  th.weapon.spare(
    title=t('table.th.wpn', 'spare4', 'Spare mags, clips, or rounds (start/max), and resupplied (supply/ammobox')
    colspan=2
  ) Reserves
  +damagesHeader({ apCount: 1, effectsCount: 1 })
  +projectilesHeader()

mixin weaponsRow(wpn, opts)
  td.weapon.idx= wpn.idx
  td.weapons.source(title=t('wpn.source.full', wpn.source))
    span(class=wpn.source).source-main.source= t('wpn.source.label', wpn.source)
    if wpn.sourcepage
      span.source-page=wpn.sourcepage
  td.weapon.category(
    title=t('wpn.category.full', wpn.category)
    class=wpn.category
  )= t('wpn.category.label', wpn.category)
  td.weapon.code
    if wpn.code
      a(href=wikiLink(wpn) target="_blank")= wpn.code
  td.weapon.name(class=`name-${wpn.type}`)
    if wpn.name
      a(href=wikiLink(wpn) target="_blank")= wpn.name
    else if wpn.explosion
      span.weapon.name= t('table.td.dmg.label',  'explosion', 'Explosion')
  - const dmg = wpn.damage || {}
  td.weapon.dmg(class={ xdmg: !!wpn.explosion })
    if dmg.type
      span.dmgtype(
        title=t('dmg.types.full', dmg.type)
      )= t('dmg.types', dmg.type)
    - const n = count(wpn)
    if n > 1
      span.pellets= n
    if dmg.dmg
      span.dmg-base= dmg.dmg
    if dmg.mass < dmg.dmg
      span.dmg-massive= dmg.mass
  - let ap = dmg.ap1
  td.damage.ap(class=`ap-${ap}`)= ap
  td.weapon.rpm
    if hasTag(wpn, 'laser')
      span.rpm-laser Beam
    if wpn.charge
      span.rpm-charge(title="Charge time")
        sup.one-over 1/
        if wpn.chargeearly
          span.charge-early= wpn.chargeearly
        span= wpn.charge
    else
      span.rpm-main= wpn.rpm
  td.weapon.reload= wpn.reload
  td.cap= wpn.cap || wpn.limit
  td.capextra
    if wpn.limit
      span.cap-limit s
    else if wpn.capplus
      sup.cap-post.cap-plus= wpn.capplus
  td.spare
    if wpn.clips
      span.clipsize(title="Rounds in Clip")= wpn.clipsize
      span.clipstart(title="Starting Clips")= wpn.clipstart
      span.clips(title="Max Clips")= wpn.clips
    if wpn.rounds
      span.roundstart(title="Starting Rounds")= roundStart(wpn)
      span.rounds(title="Max Spare Rounds")= wpn.rounds
    if wpn.mags
      span.magstart(title="Starting Mags")= wpn.magstart || wpn.mags
      span.mags(title="Max Mags")= wpn.mags
  td.pickup
    if wpn.clipsupply
      span.clipsupply(title="Clips From Supply")= wpn.clipsupply
      span.clipbox(title="Clips From Box")= wpn.clipbox
    if wpn.roundsupply
      span.roundsupply(title="Rounds From Supply")= wpn.roundsupply
      span.roundsbox(title="Rounds From Box")= wpn.roundsbox
    if wpn.supply
      span.supply(title="Rounds From Supply")= wpn.supply
      span.box(title="Rounds From Box")= wpn.box
  if wpn.damage
    +damagesRow(wpn.damage, { explosive: !!wpn.explosion, apCount: 1, effectsCount: 1 })
  else
    td.damage-filler(colspan=colspans.damages - 6)
  if wpn.projectile
    +projectilesRow(wpn.projectile)
  else if wpn.explosion
    +explosionsStubRow(wpn.explosion)
  else
    td.projectile-filler(colspan=colspans.projectiles)

mixin projectilesHeader(opts = {})
  if opts.full
    th.projectile.idx(
      title=t('table.th.prj', 'idx', 'Internal order')
    ) #
    th.projectile.id(
      title=t('table.th.prj', 'id', 'ID of projectile data (hex)')
    ) ID
    th.projectile.name(
      title=t('table.th.prj', 'name', 'Translated name of projectile')
    ) Name
    th.projectile.damageid(
      title=t('table.th.prj', 'damageid', 'ID of damage data used (hex)')
    ) Dmg
    th.projectile.pellets(
      title=t('table.th.prj', 'pellets', 'Pellet Count')
    )
  th.projectile.caliber(
    title=t('table.th.prj', 'caliber', 'Caliber (mm)')
  ) Cal
  th.projectile.velocity(
    title=t('table.th.prj', 'velocity', 'Muzzle Velocity (m/s)')
  ) v
  th.projectile.mass(
    title=t('table.th.prj', 'mass', 'Mass (grams)')
  ) m
  th.projectile.drag(
    title=t('table.th.prj', 'drag', 'Drag Coefficient Multiplier')
  )
    span c
    sub d
  th.projectile.gravity(
    title=t('table.th.prj', 'gravity', 'Gravity Multiplier')
  ) g
  th.projectile.penslow(
    title=t('table.th.prj', 'penslow', 'Penetration Slowdown')
  ) PenSl

mixin projectilesRow(prj, opts = {})
  if opts.full
    td.projectile.idx= prj.idx
    td.projectile.id= id(prj)
    td.projectile.name= prj.name
    td.projectile.damageid= id(prj, 'damageid')
    td.projectile.pellets(class={ muted: prj.pellets < 2 })= prj.pellets
  td.projectile.caliber= prj.caliber
  td.projectile.velocity= prj.velocity
  td.projectile.mass= prj.mass
  td.projectile.drag= prj.drag
  td.projectile.gravity= prj.gravity
  td.projectile.penslow= prj.penslow

mixin explosionsHeader(opts = {})
  if opts.full
    td.explosion.idx(
      title=t('table.th.aoe', 'idx', 'Internal order')
    ) #
    th.explosion.id(
      title=t('table.th.aoe', 'id', 'ID of explosion data (hex)')
    ) ID
    th.explosion.name(
      title=t('table.th.aoe', 'name', 'Translated name of AoE source')
    ) Name
    th.explosion.damageid(
      title=t('table.th.aoe', 'damageid', 'ID of damage data used (hex)')
    ) Dmg
  th.explosion.radius(
    title=t('table.th.aoe', 'radius', 'Radius Inner/Outer/Non-Damage (m)')
    colspan=3
  ) AoE

mixin explosionsStubRow(exp, opts = {})
  th.explosion.label(
    title=t('table.th.aoe', 'radius', 'Radius Inner/Outer/Non-Damage (m)')
    colspan=2
  )= t('table.td.aoe.label', 'radius', 'Radius')
  td.explosion.radius.r1= exp.r1.toFixed(1)
  td.explosion.radius.r2.rx= exp.r2.toFixed(1)
  td.explosion.radius.r3.rx= exp.r3.toFixed(1)
  td.explosion.filler(colspan=1)

mixin explosionsRow(exp, opts = {})
  if opts.full
    td.explosion.idx= exp.idx
    td.explosion.id= id(exp)
    td.explosion.name= exp.name
    td.explosion.damageid= id(exp, 'damageid')
  td.explosion.radius.r1= exp.r1
  td.explosion.radius.r2.rx= exp.r2
  td.explosion.radius.r3.rx= exp.r3

mixin damagesHeader(opts = {})
  if opts.full
    td.damage.idx(
      title=t('table.th.dmg', 'idx', 'Internal order')
    ) #
    th.damage.id(
      title=t('table.th.dmg', 'id', 'ID of damage data (hex)')
    ) ID
    th.damage.name(
      title=t('table.th.dmg', 'name', 'Translated name of damage source')
    ) Name
    th.damage.dmg(
      title=t('table.th.dmg', 'dmgs3', 'Damage type / Base damage / Damage vs Massive')
      colspan=3
    ) Damage
    - const apCount = opts.apCount || 4
    th.damage.ap(
      title=t('table.th.dmg', 'ap', 'Armor Penetration, varies by context')
      colspan=apCount
    ) AP
  th.damage.demo(
    title=t('table.th.dmg', 'demo', 'Demolition Force')
  ) DF
  th.damage.stun(
    title=t('table.th.dmg', 'stun', 'Stagger Value')
  ) SV
  th.damage.push(
    title=t('table.th.dmg', 'push', 'Push Force')
  ) PF
  - const effectsCount = opts.effectsCount || 4
  th.damage.effect(
    title=t('table.th.dmg', 'effects8', 'Status Effects')
    colspan=effectsCount * 2
  ) FX

mixin damagesRow(dmg, opts = {})
  - let i
  if opts.full
    td.damage.idx= dmg.idx
    td.damage.id= id(dmg)
    td.damage.name= dmg.name
    td.damage.dmgtype(
      class={muted: !dmg.type },
      title=t('dmg.types.full', dmg.type),
    )= t('dmg.types', dmg.type)
    td.damage.dmg(class={ xdmg: opts.explosive })= dmg.dmg
    td.damage.massive(class={ xdmg: opts.explosive })= dmg.mass
    - i = 0
    while i < (opts.apCount || 4)
      - i++
      - var ap = dmg[`ap${i}`]
      td.damage.ap(class=`ap-${ap} ap-list-${i}`)= ap
  td.damage.demo(class={ xdemo: opts.explosive })= dmg.demo
  td.damage.stun(class={ xstun: opts.explosive })= dmg.stun
  td.damage.push(class={ xpush: opts.explosive })= dmg.push
  - i = 0
  while i < (opts.effectsCount || 4)
    - i++
    - var func = dmg[`func${i}`]
    - var param = dmg[`param${i}`]
    td.damage.effect(
      class={ [`effect${i}`]: true, muted: !func }
      title=t('dmg.effects.full', func)
    )= t('dmg.effects', func, func)
    td.damage.effect-param(class={muted: !func})= param

nav.links
  ul
    li
      a(href="/") Earth Defense Force
    li.nav-selected
      a(href="/helldivers-2") Helldivers 2
    li |
    li
      a(href="https://helldivers.wiki.gg") Helldivers Wiki
    li
      a(href="https://helldivers.io/") helldivers.io
header.menu
  .filters
    ul.sources
      for source in sources
        li.source(
          class=sourceClass(source)
          title=t('wpn.source.full', source)
          onclick=`toggleSource('${source}')`
        )= t('wpn.source.label', source)
    ul.categories
      for cat in cats
        li.category(
          class=catClass(cat)
          title=t('wpn.category.full', cat)
          onclick=`toggleCategory('${cat}')`
        )= t('wpn.category.label', cat)
  .spacer
  select.select#lang-select(name="Lang" onchange="switchLang()")
    each l in langs
      option(value=l selected=(l === lang))= l
table
  tr
    +#{`${scope}Header`}(full)
  each obj in objects(scope)
    tr
      +#{`${scope}Row`}(obj)
