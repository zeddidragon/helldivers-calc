mixin weaponsHeader
  th.weapon.idx(
    title=t('table.th.wpn', 'idx', 'Internal order')
  ) #
  if !hideHeaders.weapon
    th.weapons.source(
      title=t('table.th.wpn', 'source', 'Where to obtain')
    ) Source
    th.weapon.category(
      title=t('table.th.wpn', 'category', 'Weapon Category')
    ) Type
    th.weapon.code(
      title=t('table.th.wpn', 'code', 'Military code')
    ) Code
  th.weapon.name(
    title=t('table.th.wpn', 'name', 'Name')
  ) Weapon
  th.weapon.damage(
    title=t('table.th.dmg', 'dmgs3')
    colspan=3
  ) Damage
  th.damage.ap(
    title=t('table.th.dmg', 'ap')
  ) AP
  th.weapon.rpm(
    title=t('table.th.wpn', 'rpm', 'Rate of fire (Rounds Per Minute)')
  ) RPM
  if !hideHeaders.weapon
    th.weapon.reload(
      title=t('table.th.wpn', 'reloads3', 'Reload times (seconds)')
    ) Rel
    th.weapon.cap(
      title=t('table.th.wpn', 'cap', 'Ammo capaccity (+ in chamber)')
      colspan=2
    ) Cap
    th.weapon.spare(
      title=t('table.th.wpn', 'spare4', 'Spare mags, clips, or rounds (start/max), and resupplied (supply/ammobox')
      colspan=2
    ) Reserves
  if !hideHeaders.damage
    +damagesHeader({ apCount: 1, effectsCount: 1 })
  if !hideHeaders.projectile
    +projectilesHeader()
  if !hideHeaders.dps
    th.weapon.dps(
      title=('table.th.wpn', 'dps', 'Damage Per Second')
    ) DPS
    th.weapon.tdps(
      title=('table.th.wpn', 'tdps', 'Total Damage Per Second (Including Reload Time)')
    ) TDPS
    th.weapon.magdump(
      title=('table.th.weapon.wpn', 'dmag', 'Damage for Magdump')
    ) MD
    th.weapon.totaldump(
      title=('table.th.weapon.wpn', 'total', 'Damage for expending all ammo')
    ) Total
  if !hideHeaders.dps2
    th.weapon.dps2(
      title=('table.th.weapon.wpn', 'ddps', 'Damage Per Second (vs Massive)')
    )
      sup DPS
      sub vM
    th.weapon.tdps2(
      title=('table.th.weapon.wpn', 'dtdps', 'Damage Per Second vs Massive (Including Reload Time)')
    )
      sup TDPS
    th.weapon.magdump2(
      title=('table.th.weapon.wpn', 'ddmag', 'Damage vs Massive for Magdump')
    )
      sup MD
    th.weapon.totaldump2(
      title=('table.th.weapon.wpn', 'dtotal', 'Damage vs Massive for expending all ammo')
    )
      sup Tot

mixin weaponsRow(wpn, opts)
  td.weapon.idx= wpn.idx
  if !hideHeaders.weapon
    td.weapons.source(title=t('wpn.source.full', wpn.source))
      span(class=wpn.source).source-main.source= t('wpn.source.label', wpn.source)
      if wpn.sourcepage
        span.source-page=wpn.sourcepage
    td.weapon.category(
      title=t('wpn.category.full', wpn.category)
      class=wpn.category
    )= t('wpn.category.label', wpn.category)
    td.weapon.code
      if wpn.code
        a(href=wikiLink(wpn) target="_blank")= wpn.code
  td.weapon.name(class=`name-${wpn.type}`)
    if wpn.name
      a(href=wikiLink(wpn) target="_blank")= wpn.name
    else if wpn.explosion
      span.weapon.name= t('table.td.dmg.label',  'explosion', 'Explosion')
  - const dmg = wpn.damage || {}
  td.weapon.type(class={ xdmg: !!wpn.explosion })
    if dmg.type
      span.dmgtype(
        title=t('dmg.types.full', dmg.type)
      )= t('dmg.types', dmg.type)
  - const n = count(wpn)
  td.weapon.pellets(class={ muted: n == 1, blank: !n })= n
  td.weapon.dmg(class={ xdmg: !!wpn.explosion })
    if dmg.dmg
      span.dmg-base= dmg.dmg
    if dmg.dmg2 < dmg.dmg
      span.dmg-massive= dmg.dmg2
  - let ap = dmg.ap1
  td.damage.ap(class=`ap-${ap}`)= ap
  td.weapon.rpm
    if hasTag(wpn, 'laser')
      span.rpm-laser Beam
    if wpn.charge
      span.rpm-charge(title="Charge time")
        sup.one-over 1/
        if wpn.chargeearly
          span.charge-early= wpn.chargeearly
        span= wpn.charge
    else
      span.rpm-main= wpn.rpm
  if !hideHeaders.weapon
    td.weapon.reload
      if wpn.reloadone
        span.reload-one(
          title=t('table.td.reload', '1', "Reload 1 round")
        )= wpn.reloadone.toFixed(1)
      if wpn.reloadx
        span.reload-x(
          title=t('table.td.reload', 'x', `Reload max rounds`)
        )= wpn.reloadx.toFixed(1)
      if wpn.reload
        span.reload-main(
          title=t('table.td.reload', 'empty', "Reload from empty")
        )= wpn.reload.toFixed(1)
      if wpn.reloadearly
        span.reload-early(
          title=t('table.td.reload', 'early', "Early Reload (not empty)")
        )= wpn.reloadearly.toFixed(1)
    td.weapon.cap= wpn.cap || wpn.limit
    td.weapon.capextra
      if wpn.limit
        span.cap-limit s
      else if wpn.capplus
        sup.cap-post.cap-plus= wpn.capplus
    td.wepaon.spare
      if wpn.clips
        span.clipsize(
          title=t('table.td.spare', 'clipsize', "Rounds in Clip")
        )= wpn.clipsize
        span.clipstart(
          title=t('table.td.spare', 'clipstart', "Starting Clips")
        )= wpn.clipstart
        span.clips(
          title=t('table.td.spare', 'clipsize', "Max Clips")
        )= wpn.clips
      if wpn.rounds
        span.roundstart(
          title=t('table.td.spare', 'roundstart', "Starting Rounds")
        )= roundStart(wpn)
        span.rounds(
          title=t('table.td.spare', 'rounds', "Max Spare Rounds")
        )= wpn.rounds
      if wpn.mags
        span.magstart(
          title=t('table.td.spare', 'magstart', "Starting Mags")
        )= wpn.magstart || wpn.mags
        span.mags(
          title=t('table.td.spare', 'mags', "Max Mags")
        )= wpn.mags
    td.weapon.pickup
      if wpn.clipsupply
        span.clipsupply(
          title=t('table.td.pickup', 'clipsupply', "Clips From Supply")
        )=wpn.clipsupply
        span.clipbox(
          title=t('table.td.pickup', 'clipbox', "Clips From Box")
        )=wpn.clipbox
      if wpn.roundsupply
        span.roundsupply(
          title=t('table.td.pickup', 'roundsupply', "Rounds From Supply")
        )=wpn.roundsupply
        span.roundsbox(
          title=t('table.td.pickup', 'roundsbox', "Rounds From Box")
        )=wpn.roundsbox
      if wpn.supply
        span.supply(
          title=t('table.td.pickup', 'supply', "Mags From Supply")
        )=wpn.supply
        span.box(
          title=t('table.td.pickup', 'box', "Mags From Box")
        )=wpn.box
  if !hideHeaders.damage
    if wpn.damage
      +damagesRow(wpn.damage, { explosive: !!wpn.explosion, apCount: 1, effectsCount: 1 })
    else
      td.damage-filler(colspan=colspans.damages)
  if !hideHeaders.projectile
    if wpn.projectile
      +projectilesRow(wpn.projectile)
    else if wpn.explosion
      +explosionsStubRow(wpn.explosion)
    else
      td.projectile-filler(colspan=colspans.projectiles)
  if !hideHeaders.dps
    td.dps= wpn.dps
    td.tdps= wpn.tdps
    td.magdump= wpn.magdump
    td.totaldump= wpn.totaldump
  if !hideHeaders.dps2
    td.dps2= wpn.dps2
    td.tdps2= wpn.tdps2
    td.magdump2= wpn.magdump2
    td.totaldump2= wpn.totaldump2

mixin projectilesHeader(opts = {})
  if opts.full
    th.projectile.idx(
      title=t('table.th.prj', 'idx', 'Internal order')
    ) #
    th.projectile.id(
      title=t('table.th.prj', 'id', 'ID of projectile data (hex)')
    )
      span ID
      sub p
    th.projectile.name(
      title=t('table.th.prj', 'name', 'Translated name of projectile')
    ) Name
    th.projectile.damageid(
      title=t('table.th.prj', 'damageid', 'ID of damage data used (hex)')
    ) Dmg
    th.projectile.pellets(
      title=t('table.th.prj', 'pellets', 'Pellet Count')
    )
  else if showIds
    th.projectile.id(
      title=t('table.th.prj2', 'id', 'ID of medium (projectile or explosion data) (hex)')
    )
      span ID
      sub m
  th.projectile.caliber(
    title=t('table.th.prj', 'caliber', 'Caliber (mm)')
  ) Cal
  th.projectile.velocity(
    title=t('table.th.prj', 'velocity', 'Muzzle Velocity (m/s)')
  ) v
  th.projectile.mass(
    title=t('table.th.prj', 'mass', 'Mass (grams)')
  ) m
  th.projectile.drag(
    title=t('table.th.prj', 'drag', 'Drag Coefficient Multiplier')
  )
    span c
    sub d
  th.projectile.gravity(
    title=t('table.th.prj', 'gravity', 'Gravity Multiplier')
  ) g
  th.projectile.penslow(
    title=t('table.th.prj', 'penslow', 'Penetration Slowdown')
  )
    span sl
    sub p
  th.projectile.lifetime(
    title=t('table.th.prj', 'lifetime', 'Lifetime (s)')
  ) l
  if !opts.full
    th.projectile.name(
      title=t('table.th.prj', 'name', 'Translated name of projectile')
    ) Projectile

mixin projectilesRow(prj, opts = {})
  if opts.full
    td.projectile.idx= prj.idx
    td.projectile.id= id(prj)
    td.projectile.name= prj.name
    td.projectile.damageid= id(prj, 'damageid')
    td.projectile.pellets(class={ muted: prj.pellets < 2 })= prj.pellets
  else if showIds
    td.projectile.id= id(prj)
  td.projectile.caliber= prj.caliber
  td.projectile.velocity= prj.velocity
  td.projectile.mass= prj.mass
  td.projectile.drag= prj.drag
  td.projectile.gravity= prj.gravity
  td.projectile.penslow= prj.penslow
  td.projectile.lifetime(class={ muted: !prj.lifetime })= prj.lifetime
  if !opts.full
    td.projectile.name= prj.name

mixin explosionsHeader(opts = {})
  if opts.full
    th.explosion.idx(
      title=t('table.th.aoe', 'idx', 'Internal order')
    ) #
    th.explosion.id(
      title=t('table.th.aoe', 'id', 'ID of explosion data (hex)')
    )
      span ID
      sub x
    th.explosion.name(
      title=t('table.th.aoe', 'name', 'Translated name of AoE source')
    ) Explosion
    th.explosion.damageid(
      title=t('table.th.aoe', 'damageid', 'ID of damage data used (hex)')
    ) Dmg
  th.explosion.radius(
    title=t('table.th.aoe', 'radius', 'Radius Inner/Outer/Non-Damage (m)')
    colspan=3
  ) AoE

mixin explosionsStubRow(exp, opts = {})
  if showIds
    td.explosion.id= id(exp)
  td.explosion.label(
    title=t('table.th.aoe', 'radius', 'Radius Inner/Outer/Non-Damage (m)')
    colspan=2
  )= t('table.td.aoe.label', 'radius', 'Radius')
  td.explosion.radius.stub.r1= exp.r1.toFixed(1)
  td.explosion.radius.stub.r2.rx= exp.r2.toFixed(1)
  td.explosion.radius.stub.r3.rx= exp.r3.toFixed(1)
  td.explosion.filler(colspan=4)

mixin explosionsRow(exp, opts = {})
  if opts.full
    td.explosion.idx= exp.idx
  if opts.full || showIds
    td.explosion.id= id(exp)
  if opts.full
    td.explosion.name= exp.name
    td.explosion.damageid= id(exp, 'damageid')
  td.explosion.radius.r1= exp.r1
  td.explosion.radius.r2.rx= exp.r2
  td.explosion.radius.r3.rx= exp.r3

mixin damagesHeader(opts = {})
  if opts.full
    th.damage.idx(
      title=t('table.th.dmg', 'idx', 'Internal order')
    ) #
  if opts.full || showIds
    th.damage.id(
      title=t('table.th.dmg', 'id', 'ID of damage data (hex)')
    )
      span ID
      sub d

  if opts.full && !opts.hideName
    th.damage.name(
      title=t('table.th.dmg', 'name', 'Translated name of damage source')
    ) Name
  if opts.full
    th.damage.dmg(
      title=t('table.th.dmg', 'dmgs3', 'Damage type / Base damage / Damage vs Massive')
      colspan=3
    ) Damage
    - const apCount = opts.apCount || 4
    th.damage.ap(
      title=t('table.th.dmg', 'ap', 'Armor Penetration, varies by context')
      colspan=apCount
    ) AP
  th.damage.demo(
    title=t('table.th.dmg', 'demo', 'Demolition Force')
  ) DF
  th.damage.stun(
    title=t('table.th.dmg', 'stun', 'Stagger Value')
  ) SV
  th.damage.push(
    title=t('table.th.dmg', 'push', 'Push Force')
  ) PF
  - const effectsCount = opts.effectsCount || 4
  th.damage.effect(
    title=t('table.th.dmg', 'effects8', 'Status Effects')
    colspan=effectsCount * 2
  ) FX

mixin damagesRow(dmg, opts = {})
  - let i
  if opts.full
    td.damage.idx= dmg.idx
    td.damage.id= id(dmg)
    if !opts.hideName
      td.damage.name= dmg.name
    td.damage.dmgtype(
      class={muted: !dmg.type },
      title=t('dmg.types.full', dmg.type),
    )= t('dmg.types', dmg.type)
    td.damage.dmg(class={ xdmg: opts.explosive })= dmg.dmg
    td.damage.dmg2(class={ xdmg: opts.explosive })= dmg.dmg2
    - i = 0
    while i < (opts.apCount || 4)
      - i++
      - var ap = dmg[`ap${i}`]
      td.damage.ap(class=`ap-${ap} ap-list-${i}`)= ap
  else if showIds
    td.damage.id= id(dmg)
  td.damage.demo(class={ xdemo: opts.explosive })= dmg.demo
  td.damage.stun(class={ xstun: opts.explosive })= dmg.stun
  td.damage.push(class={ xpush: opts.explosive })= dmg.push
  - i = 0
  while i < (opts.effectsCount || 4)
    - i++
    - var func = dmg[`func${i}`]
    - var param = dmg[`param${i}`]
    td.damage.effect(
      class={ [`effect${i}`]: true, muted: !func }
      title=t('dmg.effects.full', func)
    )= t('dmg.effects', func, func)
    td.damage.effect-param(class={muted: !func})= param

nav.links
  ul
    li
      a(href="/")= t('nav.links', 'edf', 'Earth Defense Force')
    li.nav-selected
      a(href="/helldivers-2")= t('nav.links', 'self', 'Helldivers 2')
    li |
    li
      a(href="https://helldivers.wiki.gg")= t('nav.links', 'wiki', 'Helldivers Wiki')
    li
      a(href="https://helldivers.io/")= t('nav.links', 'io', 'helldivers.io')
    li.spacer
    li
      ul.langs
        for l in langs
          li.lang(
            onclick=`switchLang('${l}')`
            title=t('nav.langs.full', l)
          )= l
header.menu
  .filters
    if scope === 'weapons'
      .filter-row
        ul.sources
          for source in sources
            li.source(
              class=sourceClass(source)
              title=t('wpn.source.full', source)
              onclick=`toggleSource('${source}')`
            )= t('wpn.source.label', source)
      .filter-row
        ul.categories
          for cat in cats
            li.category(
              class=catClass(cat)
              title=t('wpn.category.full', cat)
              onclick=`toggleCategory('${cat}')`
            )= t('wpn.category.label', cat)
        .divider |
        ul.colfilters
          for h in headers
            li.colfilter(
              class=headerClass(h)
              title=t('wpn.header.full', h)
              onclick=`toggleHeader('${h}')`
            )= t('wpn.header.label', h)
      if nerdMode
        ul
          li=t('explanations', 'nerdModeSpoilers', 'Here there be spoilers.')
    else
      ul.scopes
        for scope in scopes
          li.scope(
            class=scopeClass(scope)
            title=t('nav.scopes.full', scope)
            onclick=`switchScope('${scope}')`
          )= t('nav.scopes.label', scope)
  .spacer
  .side-menu
    label
      input#nerd-mode(
        type="checkbox"
        checked=nerdMode,
        onclick=`toggleNerdMode()`)
      if nerdMode
        | 🤓
      else
        | Nerd Mode
table
  tr
    +#{`${scope}Header`}(full)
    if subScope
      +#{`${subScope}Header`}(hideName)
  for obj in objects(scope)
    tr
      +#{`${scope}Row`}(obj, full)
      if subScope
        - let obj2 = subObj(obj)
        if obj2
          +#{`${subScope}Row`}(obj2, hideName)
        else
          td.damage-filler(colspan=colspans.damagesHideName)
if scope === 'weapons'
  ul
    li= t('explanations', 'reload', 'Reload is measured from when reticle disappears to when it comes back. Not all weapons had a reticle. Timing may be off by up to 0.1s.')
    li= t('explanations', 'startingMagsDisclaimer', 'Starting mags for support weapons are currently unmeasured, but become max after the ship module upgrade.')
    li= t('explanations', 'laserFire', "Laser weapons can't actually set things on fire. The data may be there to make the corpses burn.")
